// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SiUnit } from './si-unit.js';


export class ValuesInt64AndUnit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ValuesInt64AndUnit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValuesInt64AndUnit(bb:flatbuffers.ByteBuffer, obj?:ValuesInt64AndUnit):ValuesInt64AndUnit {
  return (obj || new ValuesInt64AndUnit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValuesInt64AndUnit(bb:flatbuffers.ByteBuffer, obj?:ValuesInt64AndUnit):ValuesInt64AndUnit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ValuesInt64AndUnit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

values(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unit():SiUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiUnit.undefined;
}

static startValuesInt64AndUnit(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static addUnit(builder:flatbuffers.Builder, unit:SiUnit) {
  builder.addFieldInt8(1, unit, SiUnit.undefined);
}

static endValuesInt64AndUnit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // values
  return offset;
}

static createValuesInt64AndUnit(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset, unit:SiUnit):flatbuffers.Offset {
  ValuesInt64AndUnit.startValuesInt64AndUnit(builder);
  ValuesInt64AndUnit.addValues(builder, valuesOffset);
  ValuesInt64AndUnit.addUnit(builder, unit);
  return ValuesInt64AndUnit.endValuesInt64AndUnit(builder);
}
}
